// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    Employer
    Jobseeker
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          UserRole
    Company       Company[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Company {
    id        String   @id @default(cuid())
    name      String
    location  String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @unique
    Job       Job[]
}

model JobCategory {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Job       Job[]
}

enum EmploymentType {
    FullTime
    PartTime
    Contract
    Internship
}

enum JobStatus {
    Open
    Closed
    Draft
}

model LondonAddress {  // This is a model for the London Address dropdown
    id        String   @id @default(cuid())
    location  String
    borough   String[]
    postcode  String[]
    postTown  String[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Address {
    id       String   @id @default(cuid())
    line1    String
    line2    String?
    line3    String?
    borough  String[]
    postcode String[]
    postTown String[]
    country  String   @default("United Kingdom")
    Job      Job[]
}

model Job {
    id             String         @id @default(cuid())
    title          String
    description    String
    location       Address?       @relation(fields: [addressId], references: [id])
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    company        Company        @relation(fields: [companyId], references: [id])
    companyId      String
    JobCategory    JobCategory?   @relation(fields: [jobCategoryId], references: [id])
    jobCategoryId  String?
    employmentType EmploymentType @default(FullTime)
    status         JobStatus      @default(Draft)
    addressId      String?
}
